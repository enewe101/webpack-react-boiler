FROM ubuntu
MAINTAINER Edward Newell

ARG NODE_ENV
ARG USE_SSL
ARG HOST

# Install dependencies -- nodejs, nginx, pm2
RUN apt-get update > /dev/null
RUN apt-get -qq -y install npm nginx vim curl > /dev/null
RUN curl -sL https://deb.nodesource.com/setup_8.x | bash -
RUN apt-get install -y nodejs
RUN npm install -g --silent pm2 > /dev/null
# Because of a name collision, the "node" command gets called "nodejs" on Ubuntu.  
# Force it to be "node" so that npm commands work properly.
RUN ln -s `which nodejs` /usr/local/bin/node

# Install ssl certificate management software
RUN apt-get install -y software-properties-common > /dev/null
RUN add-apt-repository -y ppa:certbot/certbot > /dev/null
RUN apt-get update > /dev/null
RUN apt-get install -y certbot > /dev/null

# Copy the code for the app into the container and build it.  First, only copy
# the package.json and run `npm install`, that way changes to app code don't cause 
# this step to repeat unless they alter dependencies
RUN mkdir -p /app
WORKDIR /app
COPY package.json /app
RUN npm install --silent

# Now copy all the rest of the files and build the app
COPY . /app

# Copy the crontab that renews certificates
RUN crontab /app/bin/cert-renew-crontab

# Configure nginx to serve the app.  Either with ssl forced, or not enabled
RUN test -z $USE_SSL || test $USE_SSL -eq 0 && \
    cp config/nginx-config-nossl /etc/nginx/sites-available/$HOST || true
RUN test ! -z $USE_SSL && test $USE_SSL -ne 0 && \
    cp config/nginx-config /etc/nginx/sites-available/$HOST || true
RUN ln -s /etc/nginx/sites-available/$HOST /etc/nginx/sites-enabled/
RUN rm /etc/nginx/sites-enabled/default

# Expose ports
EXPOSE 80 443

# Build the app for production
RUN test "$NODE_ENV" = production && npm run prod-build || true

# Start the server under pm2 supervisor, restart reverse proxy, and wait
CMD /etc/init.d/nginx restart\
  && (test "$NODE_ENV" = development && npm install && npm run dev-build || true)\
  && pm2 start config/ecosystem.config.json\
  && tail -f /dev/null
